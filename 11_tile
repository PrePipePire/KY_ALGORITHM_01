# 2xn 타일링 문제
def tile(n, memo):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    if memo[n] != 0:
        return memo[n]
    memo[n] = tile(n - 1, memo) + tile(n - 2, memo)
    return memo[n]

# 2xn 타일링 문제 (타일 종류가 3가지)
def tile2(n, memo):
    if n == 1:
        return 1
    elif n == 2:
        return 3
    if memo[n] != 0:
        return memo[n]
    memo[n] = tile2(n - 1, memo) + 2 * tile2(n - 2, memo)
    return memo[n]

# 3xn 타일링 문제 (타일 종류가 3가지)
def tile3(n, memo):
    if n % 2 == 1:
        return 0
    elif n == 0:
        return 1
    elif n == 2:
        return 3
    if memo[n] != 0:
        return memo[n]
    
    # Tile(n) = 3 * Tile(n-2) + 2 * (Tile(n-4) + Tile(n-6) + ... + Tile(0))
    result = 3 * tile3(n - 2, memo)
    for i in range(n - 4, -1, -2):
        result += 2 * tile3(i, memo)
    
    memo[n] = result
    return result

# 메인 실행
if __name__ == "__main__":
    # 메모 초기화
    max_n = 30
    memo = [0] * (max_n + 1)

    # 2xn 타일링 문제
    print("2xn 타일링 문제")
    for i in range(1, 31):
        print(f"{i}: {tile(i, memo)}")

    # 메모 초기화
    memo = [0] * (max_n + 1)

    # 2xn 타일링 문제 (타일 종류가 3가지)
    print("\n2xn 타일링 문제 (타일 종류가 3가지)")
    for i in range(1, 31):
        print(f"{i}: {tile2(i, memo)}")

    # 메모 초기화
    memo = [0] * (max_n + 1)

    # 3xn 타일링 문제 (타일 종류가 3가지)
    print("\n3xn 타일링 문제 (타일 종류가 3가지)")
    for i in range(1, 31):
        print(f"Tile3({i}): {tile3(i, memo)}")
