import sys

def matrix_chain_order(p, n):
    m = [[0] * n for _ in range(n)]
    s = [[0] * n for _ in range(n)]

    for L in range(2, n):
        for i in range(1, n - L + 1):
            j = i + L - 1
            m[i][j] = sys.maxsize 
            for k in range(i, j):
                # q = m[i][k] + m[k+1][j] + p[i-1] * p[k] * p[j]
                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]
                if q < m[i][j]:
                    m[i][j] = q
                    s[i][j] = k

        print(f"L = {L}")
        print_array(m, n)
        print_array(s, n)

    print("Optimal Parenthesization:")
    print_paren(s, 1, n - 1)
    print()

def print_paren(s, i, j):
    if i == j:
        print(f"A{i}", end="")
    else:
        print("(", end="")
        print_paren(s, i, s[i][j])
        print_paren(s, s[i][j] + 1, j)
        print(")", end="")

def print_array(arr, n):
    for i in range(1, n):
        for j in range(1, n):
            print(f"{arr[i][j]:8}", end="")
        print()
    print()

if __name__ == "__main__":
    arr = [10, 30, 5, 60, 15, 10]
    n = len(arr)

    matrix_chain_order(arr, n)
